swagger: "2.0"
info:
  description: "It is an API for managing engineer information.."
  version: "1.0.0"
  title: "Engineer API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v2"
tags:
- name: "Skill"
  description: "Abtou skill infomation."
- name: "Engineer"
  description: "About engineer infomation."
schemes:
- "http"
paths:
  /skills:
    get:
      tags:
      - "Skill"
      summary: "Find skill list."
      description: "Find skill list."
      operationId: "findSkills"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Acceptable item limit."
        required: false
        type: "integer"
      responses:
        "200":
          description: "successful operation"
        "503":
          description: "Internal server error."
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkillsFunction.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        type: aws_proxy
    post:
      tags:
      - "Skill"
      summary: "Create skill infomation."
      description: "Create skill infomation."
      operationId: "createSkill"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Skill request body."
        required: true
        schema:
          $ref: '#/definitions/Skill'
      responses:
        "200":
          description: "successful operation"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                {
                  "id":"00001", "name:"tanaka"
                }
  /skills/{skillId}:
    get:
      tags:
      - "Skill"
      summary: "Find skill by skill id."
      description: "Find skill by skill id."
      operationId: "findSkillById"
      produces:
      - "application/json"
      parameters:
      - name: "skillId"
        in: "path"
        description: "Skill id."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Skill'
        "404":
          description: "Skill not found"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SkillFunction.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: POST
        type: aws_proxy
definitions:
  Skill:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  Skills:
    type: "array"
    items:
      $ref: Skill
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"